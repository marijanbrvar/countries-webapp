{"version":3,"sources":["redux/api.js","redux/country.js","redux/middleware/api.js","components/Navbar.js","pages/Main.js","pages/CountryList.js","pages/Country.js","App.js","index.js","redux/store.js"],"names":["apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","name","initialState","continents","currentContinent","list","currentCountry","loading","reducers","countryRequested","country","countryReceived","action","payload","countryRequestFailed","setCurrentContinent","continent","clearCurrentContry","setCurrentCountry","current","findIndex","state","alpha2Code","actions","api","dispatch","next","a","type","url","method","data","onStart","onSuccess","onError","axios","request","baseURL","response","message","Navbar","history","useHistory","useDispatch","useSelector","onClick","location","pathname","push","className","Main","map","cont","idx","to","CountryList","props","match","params","useEffect","onErrorL","capital","population","Country","nativeName","flags","area","demonym","region","topLevelDomain","src","alt","App","basename","exact","path","component","ReactDOM","render","StrictMode","store","configureStore","reducer","countryReducer","middleware","getDefaultMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.a8e4e380.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const apiCallBegan = createAction('api/callBegan');\nexport const apiCallSuccess = createAction('api/callSuccess');\nexport const apiCallFailed = createAction('api/callFailed');\nexport const setCurrentContinent = createAction('country/setCurrentContinent');\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { apiCallBegan } from './api';\n\nexport const slice = createSlice({\n  name: 'country',\n  initialState: {\n    continents: ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania'],\n    currentContinent: null,\n    list: [],\n    currentCountry: null,\n    loading: false,\n  },\n  reducers: {\n    countryRequested: (country) => {\n      country.loading = true;\n    },\n    countryReceived: (country, action) => {\n      country.list = action.payload;\n      country.loading = false;\n    },\n    countryRequestFailed: (country) => {\n      country.loading = false;\n    },\n    setCurrentContinent: (continent, action) => {\n      continent.currentContinent = action.payload;\n    },\n    clearCurrentContry: (country) => {\n      country.currentCountry = null;\n    },\n    setCurrentCountry: (country, action) => {\n      country.loading = true;\n      const current = country.list.findIndex((state) => state.alpha2Code === action.payload);\n      country.currentCountry = country.list[current];\n      country.loading = false;\n    },\n  },\n});\n\nexport const {\n  countryRequested,\n  countryReceived,\n  countryRequestFailed,\n  setCurrentContinent,\n  setCurrentCountry,\n  clearCurrentContry,\n} = slice.actions;\n\nexport default slice.reducer;\n\nexport const loadCountries = (url) => (dispatch) => dispatch(\n  apiCallBegan({\n    url,\n    onStart: countryRequested.type,\n    onSuccess: countryReceived.type,\n    onErrorL: countryRequestFailed.type,\n  }),\n);\n","/* eslint-disable consistent-return */\nimport axios from 'axios';\nimport * as actions from '../api';\n\nconst api = ({ dispatch }) => (next) => async (action) => {\n  if (action.type !== actions.apiCallBegan.type) return next(action);\n\n  const {\n    url, method, data, onStart, onSuccess, onError,\n  } = action.payload;\n\n  if (onStart) dispatch({ type: onStart });\n\n  next(action);\n\n  try {\n    const response = await axios.request({\n      baseURL: 'https://restcountries.com/v2/continent',\n      url,\n      method,\n      data,\n    });\n    // General\n    dispatch(actions.apiCallSuccess(response.data));\n    // Specific\n    if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\n  } catch (error) {\n    // General\n    dispatch(actions.apiCallFailed(error.message));\n    // Specific\n    if (onError) dispatch({ type: onError, payload: error.message });\n  }\n};\n\nexport default api;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setCurrentContinent, clearCurrentContry } from '../redux/country';\n\nconst Navbar = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { currentContinent } = useSelector((state) => state.country);\n\n  const goBack = () => {\n    if (history.location.pathname === '/') { return clearCurrentContry(); }\n    dispatch(setCurrentContinent(null));\n    return history.push('/');\n  };\n\n  return (\n    <nav>\n      <h1>\n        {currentContinent !== null && <i onClick={() => goBack()} className=\"material-icons\">chevron_left</i>}\n        {\n        currentContinent === null\n          ? 'Countries App'\n          : currentContinent\n        }\n      </h1>\n      <div>\n        <i className=\"material-icons mx-1\">mic</i>\n        <i className=\"material-icons\">settings</i>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nconst Main = () => {\n  const { continents } = useSelector((state) => state.country);\n\n  return (\n    <div className=\"main\">\n      <h3>Select Continent</h3>\n      <ul className=\"section\">\n        {continents.map((cont, idx) => (\n          <li key={idx} className=\"list-item\">\n            <Link to={`/${cont}`}>\n              <div>\n                <h2>{cont}</h2>\n              </div>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Main;\n","/* eslint-disable max-len */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { loadCountries, setCurrentContinent } from '../redux/country';\n\nconst CountryList = (props) => {\n  const { continent } = props.match.params;\n  const dispatch = useDispatch();\n  const { list, loading } = useSelector((state) => state.country);\n\n  useEffect(() => {\n    dispatch(setCurrentContinent(continent));\n    dispatch(loadCountries(`/${continent}`));\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n\n  return (\n    <div className=\"main\">\n      <h3>Country List page</h3>\n      <ul className=\"section\">\n        {list.map((country) => (\n          <li className=\"list-item\" key={country.alpha2Code}>\n            <Link to={`/${continent}/${country.alpha2Code}`}>\n              <div>\n                <h2>{country.name}</h2>\n                <p>\n                  Capital:\n                  {country.capital}\n                </p>\n                <p>\n                  Population:\n                  {country.population}\n                </p>\n              </div>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CountryList;\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/prop-types */\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCurrentCountry } from '../redux/country';\n\nconst Country = (props) => {\n  const { country } = props.match.params;\n  const { loading, currentCountry } = useSelector((state) => state.country);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setCurrentCountry(country));\n  }, []);\n\n  if (!loading && currentCountry === null) return <p>Loading...</p>;\n\n  const {\n    name,\n    nativeName,\n    capital,\n    flags,\n    area,\n    population,\n    demonym,\n    region,\n    topLevelDomain,\n  } = currentCountry;\n\n  return (\n    <div>\n      <div className=\"list-card\">\n        <div className=\"card-header\">\n          <div>\n            <div>\n              <img src={flags[0]} alt={name} />\n            </div>\n            <h2>\n              {name}\n            </h2>\n          </div>\n        </div>\n        <div className=\"list-item\">\n          <p>Native name:</p>\n          <div>{nativeName}</div>\n        </div>\n        <div className=\"list-item\">\n          <p>Capital city:</p>\n          <div>{capital}</div>\n        </div>\n        <div className=\"list-item\">\n          <p>Area sqm:</p>\n          <div>{area}</div>\n        </div>\n        <div className=\"list-item\">\n          <p>Population:</p>\n          <div>{population}</div>\n        </div>\n        <div className=\"list-item\">\n          <p>Demonym:</p>\n          <div>{demonym}</div>\n        </div>\n        <div className=\"list-item\">\n          <p>Region:</p>\n          <div>{region}</div>\n        </div>\n        <div className=\"list-item\">\n          <p>Top level domain:</p>\n          <div>{topLevelDomain[0]}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Country;\n","import { Switch, Route, HashRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Main from './pages/Main';\nimport CountryList from './pages/CountryList';\nimport Country from './pages/Country';\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/:continent\" component={CountryList} />\n          <Route exact path=\"/:continent/:country\" component={Country} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","/* eslint-disable func-names */\n/* eslint-disable import/no-anonymous-default-export */\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport countryReducer from './country';\nimport api from './middleware/api';\n\nexport default function () {\n  return configureStore({\n    reducer: {\n      country: countryReducer,\n    },\n    middleware: [\n      ...getDefaultMiddleware(),\n      api,\n    ],\n  });\n}\n"],"sourceRoot":""}